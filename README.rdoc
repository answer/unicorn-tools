= unicorn-tools

rack アプリケーション用 http サーバー unicorn を動かすときに使うツール群


== unicorn.config.rb

unicorn の設定


== unicorn_rails.init.sh

unicorn 起動スクリプト

起動、停止など、 unicorn_rails の起動に必要なコマンドを提供する

 ./unicorn_rails.init.sh status

 ./unicorn_rails.init.sh start
 ./unicorn_rails.init.sh stop
 ./unicorn_rails.init.sh restart

 ./unicorn_rails.init.sh dup
 ./unicorn_rails.init.sh ok
 ./unicorn_rails.init.sh cancel

開発環境では start, stop, restart を使用する

stop → start では、新しい unicorn が立ち上がるまで、 nginx は 503 エラーとなる


本番環境では dup, ok, cancel を用いる

dup → ok で、ダウンタイムなしの更新となる

互換性のない変更を行った場合は、 dup コマンドの中で、 unicorn が再起動してから古い worker が終了するまでは、アプリケーションはエラーになる

互換性のない変更が含まれる場合は、サーバーにアクセスがなくなる時間を選んで更新を行わなければならない

アプリケーションのエラーによって、ゴミが後に残ったりするような場合は restart を使って、再起動中のアクセスを拒否するべき


=== start

unicorn_rails を起動する

RAILS_ENV, RAILS_DEVEL_NAME は、環境変数がそのまま渡される

すでにプロセスが起動している場合、 unicorn_rails を起動する前にキャンセルされる


=== stop

pid ファイルのプロセスに QUIT シグナルを送信する

そんなプロセスが無い場合は何もしない

pid.oldbin のプロセスが存在する場合、キャンセルされる


=== restart

stop && start


=== status

pid ファイルのプロセスの状態を表示する


=== dup

pid ファイルのプロセスに USR2 シグナルを送信する

そんなプロセスが無い場合は何もしない

pid.oldbin のプロセスが存在する場合、キャンセルされる

USR2 シグナルを送信してから、 status を確認して、新しいプロセスが「待機」になった後、古いプロセスに WINCH シグナルを送信する

USR2 シグナルの後、新しいプロセスの起動に失敗した場合は何もしない

このあと、新しい pid のプロセスと、古い pid.oldbin のプロセスが同時に存在することになるので、 start, stop, restart はキャンセルされるようになる


=== ok

pid.oldbin のプロセスに QUIT シグナルを送信する

そんなプロセスが無い場合はキャンセルされる


=== cancel

pid.oldbin のプロセスに QUIT シグナルを送信する

そんなプロセスが無い場合はキャンセルされる

pid.oldbin のプロセスが存在しない場合、キャンセルされる
